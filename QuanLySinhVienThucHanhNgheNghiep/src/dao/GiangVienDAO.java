package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

import com.mysql.cj.x.protobuf.MysqlxPrepare.Prepare;

import database.JDBCUtil;
import model.GiangVien;
import model.SinhVien;

public class GiangVienDAO implements DAOInterface<GiangVien>{
	public static GiangVienDAO getInstance()//GiangVienDAO.getInstance().insert instead of GiangVienDAO g = new GiangVienDAO(); g.insert();.
	{
		return new GiangVienDAO();
	}
	@Override
	public int insert(GiangVien t) {
		int ketQua = 0;
		try { 
			//Buoc 1: Tao ket noi den csdl.
			Connection con = JDBCUtil.getConnection();
			
			//Buoc 2: Tao ra doi tuong statement.
			
			String sql = "INSERT INTO giangvien(id, name) "
					  + "VALUES(?,?);";
			
			PreparedStatement pst = con.prepareStatement(sql);//Creates a Statement object for sendingSQL statements to the database.
			
			pst.setString(1, t.getId());
			pst.setString(2, t.getName());
			
			//Buoc 3: Thuc thi cau lenh sql.
			
			ketQua = pst.executeUpdate();
			
			//Buoc 4: Xu ly ket qua.
			System.out.println("Ban da thuc thi: "+ sql);
			System.out.println("Co "+ketQua+ " dong bi thay doi");
			
			//Buoc 5: Ngat ket noi. 
			JDBCUtil.closeConnection(con);
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return 0;
	}

	@Override
	public int update(GiangVien t) {
		int ketQua = 0;
		try { 
			//Buoc 1: Tao ket noi den csdl.
			Connection con = JDBCUtil.getConnection();
			
			//Buoc 2: Tao ra doi tuong statement.
			
			String sql = "UPDATE giangvien"
					  + " SET"
					  	+ " name = ?"
					  + " WHERE"
					  	+ " id = ?;";
			
			PreparedStatement pst = con.prepareStatement(sql);
			
			pst.setString(1, t.getName());
			pst.setString(2, t.getId());
			
			//Buoc 3: Thuc thi cau lenh sql.
			
			System.out.println(sql);
			
			ketQua = pst.executeUpdate();
			
			//Buoc 4: Xu ly ket qua.
			System.out.println("Ban da thuc thi: "+ sql);
			System.out.println("Co "+ketQua+ " dong bi thay doi");
			
			//Buoc 5: Ngat ket noi. 
			JDBCUtil.closeConnection(con);
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return 0;
	}

	@Override
	public int delete(GiangVien t) {
		int ketQua = 0;
		try { 
			//Buoc 1: Tao ket noi den csdl.
			Connection con = JDBCUtil.getConnection();
			
			//Buoc 2: Tao ra doi tuong statement.
			
			String sql = "DELETE FROM giangvien"		  
					  + " WHERE"
					  	+ " id = ?;";
			
			PreparedStatement pst = con.prepareStatement(sql);//Creates a Statement object for sendingSQL statements to the database.
			
			pst.setString(1, t.getId());
			
			//Buoc 3: Thuc thi cau lenh sql.
			
			System.out.println(sql);
			
			ketQua = pst.executeUpdate();//Tra ve so luong dong thay doi.
			
			//Buoc 4: Xu ly ket qua.
			System.out.println("Ban da thuc thi: "+ sql);
			System.out.println("Co "+ketQua+ " dong bi thay doi");
			
			//Buoc 5: Ngat ket noi. 
			JDBCUtil.closeConnection(con);
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return 0;
	}

	@Override
	public ArrayList<GiangVien> selectAll() {
		ArrayList<GiangVien> ketQua = new ArrayList<GiangVien>();
		try { 
			//Buoc 1: Tao ket noi den csdl.
			Connection con = JDBCUtil.getConnection();
			
			//Buoc 2: Tao ra doi tuong statement.
			
			String sql = "SELECT * FROM giangvien;";
			
			PreparedStatement pst = con.prepareStatement(sql);//Creates a Statement object for sendingSQL statements to the database.
			
			//Buoc 3: Thuc thi cau lenh sql.
			
			System.out.println(sql);
			
			ResultSet rs = pst.executeQuery();//Saved data get from database into ResultSet.
			//excuteQuery là câu lệnh lấy dữ liệu từ csdl MySQL và đưa lên chương trình console Java. ResultSet is a table of data representing a database result set, which is usually generated by executing a statement that queries the database.
			
			//Buoc 4: Xu ly ket qua.
			while(rs.next())//next() get first row in result set table, then second, and so on. Return true if data still have, return false if out of data.
			{
				String id = rs.getString("id");//Parameter columnLabel not columnIdex because if i create new column in database before id. The sequence of index will change, and it is affect on the result.  
				String name = rs.getString("name");
				
				GiangVien giangvien = new GiangVien(id, name);
				ketQua.add(giangvien);//Appends the specified element to the end of this list.
				
			}
			//Buoc 5: Ngat ket noi. 
			JDBCUtil.closeConnection(con);
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return ketQua;
	}

	@Override
	public GiangVien selectById(GiangVien t) {
		GiangVien ketQua = null;
		try { 
			//Buoc 1: Tao ket noi den csdl.
			Connection con = JDBCUtil.getConnection();
			
			//Buoc 2: Tao ra doi tuong statement.
			
			String sql = "SELECT * FROM giangvien WHERE id = ?;";
			
			PreparedStatement pst = con.prepareStatement(sql);//Creates a Statement object for sendingSQL statements to the database.
			
			pst.setString(1, t.getId());
			
			//Buoc 3: Thuc thi cau lenh sql.
			
			System.out.println(sql);
			
			ResultSet rs = pst.executeQuery();//Saved data get from database into ResultSet.
			//excuteQuery là câu lệnh lấy dữ liệu từ csdl MySQL và đưa lên chương trình console Java. ResultSet is a table of data representing a database result set, which is usually generated by executing a statement that queries the database.
			
			//Buoc 4: Xu ly ket qua.
			while(rs.next())//next() get first row in result set table, then second, and so on. Return true if data still have, return false if out of data.
			{
				String id = rs.getString("id");//Parameter columnLabel not columnIdex because if i create new column in database before id. The sequence of index will change, and it is affect on the result.  
				String name = rs.getString("name");
				
				ketQua = new GiangVien(id, name);
				
			}
			//Buoc 5: Ngat ket noi. 
			JDBCUtil.closeConnection(con);
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return ketQua;
	}

	public ArrayList<GiangVien> selectByConditionName(String condition) {
		ArrayList<GiangVien> ketQua = new ArrayList<GiangVien>();
		try { 
			//Buoc 1: Tao ket noi den csdl.
			Connection con = JDBCUtil.getConnection();
			
			//Buoc 2: Tao ra doi tuong statement.
			
			String sql = "SELECT * FROM giangvien WHERE name = ?;";
			
			PreparedStatement pst = con.prepareStatement(sql);//Creates a Statement object for sendingSQL statements to the database.
			
			pst.setString(1, condition);
			
			//Buoc 3: Thuc thi cau lenh sql.
			
			System.out.println(sql);
			
			ResultSet rs = pst.executeQuery();//Saved data get from database into ResultSet.
			//excuteQuery là câu lệnh lấy dữ liệu từ csdl MySQL và đưa lên chương trình console Java. ResultSet is a table of data representing a database result set, which is usually generated by executing a statement that queries the database.
			
			//Buoc 4: Xu ly ket qua.
			while(rs.next())//next() get first row in result set table, then second, and so on. Return true if data still have, return false if out of data.
			{
				String id = rs.getString("id");//Parameter columnLabel not columnIdex because if i create new column in database before id. The sequence of index will change, and it is affect on the result.  
				String name = rs.getString("name");
				
				GiangVien giangvien = new GiangVien(id, name);
				ketQua.add(giangvien);//Appends the specified element to the end of this list.
				
			}
			//Buoc 5: Ngat ket noi. 
			JDBCUtil.closeConnection(con);
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return ketQua;
	}
	@Override
	public ArrayList<GiangVien> selectByCondition(String condition) {
		// TODO Auto-generated method stub
		return null;
	}
	

}
